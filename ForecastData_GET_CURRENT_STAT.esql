

CREATE COMPUTE MODULE ForecastData_GET_CURRENT_STAT
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE i INTEGER 1;
		DECLARE count INTEGER;
		SET count = CARDINALITY(InputRoot.JSON.Data.objects);
     	
     	WHILE i <= count DO 
     		-- 2018-10-04T10:30:00 - from API 
     		-- 2018-10-04T20:45:00 - from API 
     		-- 2018-10-04T21:00:00 - from API
     		-- 2018-10-04T21:15:00 - from API 
     		-- 2018-10-08 21:02:53.676495 -- from IIB
     		
     		DECLARE my_date, my_time CHARACTER;
     		DECLARE forecast_date, forecast_time CHARACTER;
     		DECLARE my_epoc, forecast_epoc INTEGER;
     		SET my_time = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'hhmmss'); 
     		SET my_date = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd');
     		SET forecast_date = SUBSTRING(InputRoot.JSON.Data.objects[i].date BEFORE 'T');
     		SET forecast_time = SUBSTRING(InputRoot.JSON.Data.objects[i].date FROM 12 FOR 2) || SUBSTRING(InputRoot.JSON.Data.objects[i].date FROM 15 FOR 2) || SUBSTRING(InputRoot.JSON.Data.objects[i].date FROM 18 FOR 2);
     		SET my_epoc = CAST(my_time AS INTEGER);
     		SET forecast_epoc = CAST(forecast_time AS INTEGER);
     		
     		IF my_date = forecast_date AND my_epoc < forecast_epoc THEN
				-- establishment, created_date -- from global variable 
				
				-- type = 1 = forecast sales
				INSERT INTO Database.M_STATISTIC(establishment, value, type, created_date, status) VALUES(InputLocalEnvironment.Variables.establishment, InputRoot.JSON.Data.objects[i].forecast_sales, 1, InputRoot.JSON.Data.objects[i].date, 0);
				COMMIT;
	
				
				-- type = 2 = forecast order
				INSERT INTO Database.M_STATISTIC(establishment, value, type, created_date, status) VALUES(InputLocalEnvironment.Variables.establishment, InputRoot.JSON.Data.objects[i].forecast_order, 2, InputRoot.JSON.Data.objects[i].date, 0);
				COMMIT;
				
			END IF;
			SET i = i + 1;
		END WHILE;
		
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
